
git add  --添加本地文件，git add xx.md添加单个文件，多个文件可以用空格来隔开，比如(git add x.md xx.md xxx.md)
git add .添加所有修改的文件到暂存区

git commit -m ""提交到版本库，提交更改.提交到本地版本库了

git diff 比较差异

git push origin xxx 推送到仓库

git pull 从远程仓库拉取到本地

git branch x..创建分支

ssh -T git@github.com 验证有没有连接上remote远程服务器

ssh -keygen  生成ssh key

git init --初始化项目，刚开始初始化项目的时候使用

git clone --从服务器上克隆到本地，如果服务器上面已经有项目了，直接使用这个命令clone到本地进行使用。

git status --查看版本信息

git log 查看提交记录


git push --tags --将更改推送到服务器


git config 设置git配置相关信息

git config --local -l 查看当前仓库的配置文件
git config --global -l 查看全局的配置文件
git config --system -l 查看系统的配置文件

git config --local -e 编辑当前仓库的配置文件
...

git config --local -add key value 添加内容到当前仓库的配置文件，key名称，value是值。如：
格式: git config [–local|–global|–system] –add section.key value(默认是添加在local配置中)，
注意add后面的section,key,value一项都不能少，否则添加失败。比如我们执行：git config –add cat.name tom这样才是正确的

git config [–local|–global|–system] –get section.key(默认是获取local配置中内容)
我们先往global配置中写入一个cat.name=Tomcat的配置项，再使用git config –get cat.name看看得到的是什么
删除一个配置项：git config [–local|–global|–system] –unset section.key


-------------------------以下来源于知乎-----------------------

作者：彭勇
链接：https://www.zhihu.com/question/19946553/answer/13759819
来源：知乎
著作权归作者所有，转载请联系作者获得授权。

1. git 的 add ，是一个容易引起疑问的命令。在 subversion 中的 svn add 动作是将某个文件加入版本控制，而 git add的意义完全不同。

同时， git diff --cached 是比较 stage 的文件的差异的，也是一个不直观的命令。

github 2008年的blog中，也提到，容易引起混淆：
https://github.com/blog/196-gittogether-2008
http://learn.github.com/p/normal.html

things like making use of the term ‘stage’ for things that happen in the index (such as using ‘git diff —staged’ instead of ‘git diff —cached’) is being worked on. I’m excited that staging files may soon be done via ‘git stage’ rather-than/in-addition-to ‘git add’. This is nice for new users who often have a hard time seeing why you have to keep ‘git add’ing to stage your changes.

事实上，在 git 的后续版本中，就做了两个修改：
git stage 作为 git add 的一个同义词
git diff --staged 作为 git diff --cached 的相同命令
为了容易理解，推荐大家使用 git stage 和 git diff --staged 这两个命令，而git add 和 git diff --cached 这两个命令，仅仅为了保持和以前的兼容做保留。

2. 增加 stage 的带来的好处是什么？
主要有两个好处，一个是分批、分阶段递交，一个是进行快照，便于回退
2.1 分批递交，降低commit的颗粒度
比如，你修改了 a.py, b.py, c.py, d.py，其中 a.py 和 c.py 是一个功能相关修改，b.py，d.py属于另外一个功能相关修改。那么你就可以采用：
git stage a.py c.py
git commit -m "function 1"
git stage b.py d.py
git commit -m "function 2"

2.2 分阶段递交
比如，你修改了文件 hello.py，修改了一些以后，做了 git stage heello.py动作，相当于对当前的hello.py 做了一个快照， 然后又做了一些修改，这时候，如果直接采用 git commit 递交，则只会对第一次的快照进行递交，当前内容还保存在 working 工作区。

当前的最新修改，则需要再做一次 git stage ，才能递交。

这中间细微的差别，请参见：
http://learn.github.com/p/normal.html

由于git这个特性，需要注意到是，每次递交之前，需要确认是否已经将相关的修改都stage 了，否则可能仅仅递交了部分不完整的修改。
比如你修改了部分内容，进行了 stage，后来你又做了一些修改，然后就递交，这时，后面的修改，并没有递交。

2.3 文件快照，便于回退
做了部分修改以后，进行 git stage，然后任何时刻，都可以回退到stage时的状态：

git checkout -- hello.py

3. git diff ， git diff --staged 和 git diff HEAD的差别

当一个文件做了stage，然后又做了一些修改，则：

git diff 显示当前工作区（没有add）的文件和stage区（已经add的）文件的差异

git diff --staged 显示stage区和HEAD（已经commit的）的文件的差异

git diff HEAD 显示工作区和上次递交文件的差异

具体参见 git help diff 的EXAMPLES部分。

使用 git status 可以看到，一个文件可能同时存在两种差异。具体参见：
http://learn.github.com/p/normal.html

4. reset 和 checkout的区别
当文件加入了 stage 区以后，如果要从stage删除，则使用 reset,此时工作区的文件不做任何修改，比如：
git reset hello.py
这个命令就是 git stage hello.py 的反操作。

当文件加入了 stage 区以后，后来又做了一些修改，这时发现后面的修改有问题，想回退到stage的状态，使用 checkout 命令：
git checkout hello.py

5. 可以使用 git commit -a 命令，跳过 git stage 这个命令，直接递交

6. 最佳实践：
做了阶段性修改，但是还不能做一次递交，这时先 git stage 一下
如果有问题，可以随时 checkout 回退
递交之前，使用 git status，git diff HEAD 仔细查看是否需要的递交
git commit -a ，保证递交了所有内容 


git status 乱码： git config --global core.quotepath false
